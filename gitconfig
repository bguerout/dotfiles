[core]
    autocrlf = input
    editor = vim
[user]
    name = Benoît Guérout
    email = bguerout@gmail.com
[fetch]
    prune = true
[push]
    default = simple
[pull]
    rebase = true
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
[alias]
    st = status
    br = branch
    panic = "!f() { PANIC_SUFFIX=$(date +%s) && tar cvf ../git-panic-$PANIC_SUFFIX.tar *; }; f"
    info = !git remote show origin && echo --------- && git branch -a -vv
    safepush = !echo "Lets do this : " && git willpush && git pull --rebase && npm test && git push
    track = branch --set-upstream
    whereis = branch --contains
    redo = "!f() { git rebase -i $1^; }; f"
    plog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    prune-all= "!f() { git fetch --prune && git branch --merged origin/master | grep -v master | xargs git branch -d; }; f"
    share= "!f() { git push -u origin $(git rev-parse --abbrev-ref HEAD) && hub pull-request --browse -b $1; }; f"
    serve = "!f() { git daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths --port=$1 .git/; }; f"
    willpush = "!f() { BRANCH=$(git symbolic-ref -q HEAD) && BRANCH=${BRANCH##refs/heads/};\
git log origin/$BRANCH..HEAD --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative; }; f"
